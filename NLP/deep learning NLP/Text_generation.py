def read_file(filepath):
    with open(filepath) as f:
        str_text = f.read()
    
    return str_text

#read_file('moby_dick_four_chapters.txt')

import spacy

nlp = spacy.load('en', disable =['parser', 'tagger', 'ner'])
# the disable function disable the mentioned elements of the pipeleine and this command is being used nly for tokenization
nlp.max_length = 1198623

def seperate_punc(doc_text):
    return[token.text.lower()for token in nlp(doc_text) if token.text not in '\n\n \n\n\n!"-#$%&()--.*+,-/:;<=>?@[\\]^_`{|}~\t\n ']

d = read_file('moby_dick_four_chapters.txt')

tokens = seperate_punc(d)

#Creating a sequence of tokens [pass in 25 words and let the neural network predict #26 in this case]
train_len = 25 + 1

text_sequences =[]

for i in range(train_len, len(tokens)):
    seq = tokens[i-train_len:i]
    text_sequences.append(seq)
    
from keras.preprocessing.text import Tokenizer
tokenizer = Tokenizer()
tokenizer.fit_on_texts(text_sequences)
sequences = tokenizer.texts_to_sequences(text_sequences)
#tokenizer.index_word #to predict the relation between the numerical id and the actual word

import numpy as np

sequences = np.array(sequences)

vocab = len(tokenizer.word_counts)
# Creating the LSTM model 
''' Split the Data into features and labels 
X = First n words of the sequence(25 in this case)
y = Next Word of the sequence'''

from keras.utils import to_categorical
X = sequences[:,:-1]
y = sequences[:,-1]

y = to_categorical(y, num_classes = vocab + 1)
seq_len = X.shape[1]

from keras.models import Sequential
from keras.layers import Dense, LSTM, Embedding

def create_model(vocab, seq_len):
    model = Sequential()
    model.add(Embedding(vocab, seq_len, input_length =seq_len))
    # It turns positive integers into dense vectors of fixed size based of the vocabulary
    model.add(LSTM(75, return_sequences =True))
    model.add(LSTM(75))
    model.add(Dense(150,activation = 'relu'))
    model.add(Dense(vocab, activation = 'softmax'))
    model.compile(loss = 'categorical_crossentropy', optimizer ='adam', metrics = ['accuracy'])
    model.summary()
    return model

model = create_model(vocab+1,seq_len)

from pickle import dump,load

model.fit(X,y,batch_size = 128, epochs = 200, verbose = 1)

model.save('mob.h5')
dump(tokenizer,open('my_simpletokenizer','wb'))

#Generating Text based off a seed text
from keras.models import load_model

model = load_model('mob.h5')
tokenizer = load(open('my_simpletokenizer','rb'))

from keras.preprocessing.sequence import pad_sequences 
def generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):
    '''
    INPUTS:
    model : model that was trained on text data
    tokenizer : tokenizer that was fit on text data
    seq_len : length of training sequence
    seed_text : raw string text to serve as the seed
    num_gen_words : number of words to be generated by model
    '''
    
    # Final Output
    output_text = []
    
    # Intial Seed Sequence
    input_text = seed_text
    
    # Create num_gen_words
    for i in range(num_gen_words):
        
        # Take the input text string and encode it to a sequence
        encoded_text = tokenizer.texts_to_sequences([input_text])[0]
        
        # Pad sequences to our trained rate (50 words in the video)
        pad_encoded = pad_sequences([encoded_text], maxlen=seq_len, truncating='pre')
        
        # Predict Class Probabilities for each word
        pred_word_ind = model.predict_classes(pad_encoded, verbose=0)[0]
        
        # Grab word
        pred_word = tokenizer.index_word[pred_word_ind] 
        
        # Update the sequence of input text (shifting one over with the new word)
        input_text += ' ' + pred_word
        
        output_text.append(pred_word)
        
    # Make it look like a sentence.
    return ' '.join(output_text)


seed_text = ' '.join(text_sequences[0])

generate_text(model, tokenizer, seq_len, seed_text = seed_text, num_gen_words = 25)
        